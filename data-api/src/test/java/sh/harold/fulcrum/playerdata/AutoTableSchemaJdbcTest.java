package sh.harold.fulcrum.playerdata;

import org.junit.jupiter.api.Test;
import sh.harold.fulcrum.api.data.annotation.Column;
import sh.harold.fulcrum.api.data.backend.core.AutoTableSchema;
import sh.harold.fulcrum.api.data.impl.SchemaVersion;
import sh.harold.fulcrum.api.data.impl.Table;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;

@Table("test_players")
@SchemaVersion(1)
record TestPlayer(
        @Column(primary = true) UUID id,
        @Column String name,
        @Column int level
) {
}

class MockStatement implements Statement {
    final List<String> executedSql = new ArrayList<>();

    @Override
    public boolean execute(String sql) throws SQLException {
        executedSql.add(sql);
        return true;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) {
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) {
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) {
        return 0;
    }

    @Override
    public java.sql.ResultSet getGeneratedKeys() {
        return null;
    }

    @Override
    public java.sql.Connection getConnection() {
        return null;
    }

    // ...existing code...
    @Override
    public void close() {
    }

    // All other methods throw or are no-ops
    @Override
    public <T> T unwrap(Class<T> iface) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) {
        return false;
    }

    @Override
    public java.sql.ResultSet executeQuery(String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int executeUpdate(String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getMaxFieldSize() {
        return 0;
    }

    @Override
    public void setMaxFieldSize(int max) {
    }

    @Override
    public int getMaxRows() {
        return 0;
    }

    @Override
    public void setMaxRows(int max) {
    }

    @Override
    public void setEscapeProcessing(boolean enable) {
    }

    @Override
    public int getQueryTimeout() {
        return 0;
    }

    @Override
    public void setQueryTimeout(int seconds) {
    }

    @Override
    public void cancel() {
    }

    @Override
    public SQLWarning getWarnings() {
        return null;
    }

    @Override
    public void clearWarnings() {
    }

    @Override
    public void setCursorName(String name) {
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean execute(String sql, String[] columnNames) {
        throw new UnsupportedOperationException();
    }

    @Override
    public int getUpdateCount() {
        return 0;
    }

    @Override
    public boolean getMoreResults() {
        return false;
    }

    @Override
    public int getFetchDirection() {
        return 0;
    }

    @Override
    public void setFetchDirection(int direction) {
    }

    @Override
    public int getFetchSize() {
        return 0;
    }

    @Override
    public void setFetchSize(int rows) {
    }

    @Override
    public int getResultSetConcurrency() {
        return 0;
    }

    @Override
    public int getResultSetType() {
        return 0;
    }

    @Override
    public void addBatch(String sql) {
    }

    @Override
    public void clearBatch() {
    }

    @Override
    public int[] executeBatch() {
        return new int[0];
    }

    @Override
    public java.sql.ResultSet getResultSet() {
        return null;
    }

    @Override
    public boolean getMoreResults(int current) {
        return false;
    }

    @Override
    public int getResultSetHoldability() {
        return 0;
    }

    @Override
    public boolean isClosed() {
        return false;
    }

    @Override
    public boolean isPoolable() {
        return false;
    }

    @Override
    public void setPoolable(boolean poolable) {
    }

    @Override
    public void closeOnCompletion() {
    }

    @Override
    public boolean isCloseOnCompletion() {
        return false;
    }
}

class MockConnection implements Connection {
    final MockStatement statement = new MockStatement();

    @Override
    public Statement createStatement() {
        return statement;
    }

    // ...existing code...
    @Override
    public void close() {
    }

    // All other methods throw or are no-ops
    @Override
    public <T> T unwrap(Class<T> iface) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) {
        return false;
    }

    @Override
    public java.sql.PreparedStatement prepareStatement(String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.CallableStatement prepareCall(String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public String nativeSQL(String sql) {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean getAutoCommit() {
        return false;
    }

    @Override
    public void setAutoCommit(boolean autoCommit) {
    }

    @Override
    public void commit() {
    }

    @Override
    public void rollback() {
    }

    @Override
    public boolean isClosed() {
        return false;
    }

    @Override
    public java.sql.DatabaseMetaData getMetaData() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isReadOnly() {
        return false;
    }

    @Override
    public void setReadOnly(boolean readOnly) {
    }

    @Override
    public String getCatalog() {
        return null;
    }

    @Override
    public void setCatalog(String catalog) {
    }

    @Override
    public int getTransactionIsolation() {
        return 0;
    }

    @Override
    public void setTransactionIsolation(int level) {
    }

    @Override
    public java.sql.SQLWarning getWarnings() {
        return null;
    }

    @Override
    public void clearWarnings() {
    }

    @Override
    public java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency) {
        return statement;
    }

    @Override
    public java.sql.Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        return statement;
    }

    @Override
    public java.sql.PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.PreparedStatement prepareStatement(String sql, int[] columnIndexes) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.PreparedStatement prepareStatement(String sql, String[] columnNames) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.Clob createClob() {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.Blob createBlob() {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.NClob createNClob() {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.SQLXML createSQLXML() {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isValid(int timeout) {
        return false;
    }

    @Override
    public void setClientInfo(String name, String value) {
    }

    @Override
    public String getClientInfo(String name) {
        return null;
    }

    @Override
    public java.util.Properties getClientInfo() {
        return null;
    }

    @Override
    public void setClientInfo(java.util.Properties properties) {
    }

    @Override
    public int getHoldability() {
        return 0;
    }

    @Override
    public void setHoldability(int holdability) {
    }

    @Override
    public java.sql.Savepoint setSavepoint() {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.Savepoint setSavepoint(String name) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void rollback(java.sql.Savepoint savepoint) {
        throw new UnsupportedOperationException();
    }

    @Override
    public void releaseSavepoint(java.sql.Savepoint savepoint) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.sql.CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        throw new UnsupportedOperationException();
    }

    @Override
    public java.util.Map<String, Class<?>> getTypeMap() {
        return null;
    }

    @Override
    public void setTypeMap(java.util.Map<String, Class<?>> map) {
    }

    @Override
    public String getSchema() {
        return null;
    }

    @Override
    public void setSchema(String schema) {
    }

    @Override
    public void abort(java.util.concurrent.Executor executor) {
    }

    @Override
    public void setNetworkTimeout(java.util.concurrent.Executor executor, int milliseconds) {
    }

    @Override
    public int getNetworkTimeout() {
        return 0;
    }

    @Override
    public java.sql.Array createArrayOf(String typeName, Object[] elements) {
        return null;
    }

    @Override
    public java.sql.Struct createStruct(String typeName, Object[] attributes) {
        return null;
    }
}

class AutoTableSchemaJdbcTest {
    @Test
    void createTableExecutesCorrectSql() throws Exception {
        var conn = new MockConnection();
        var schema = new AutoTableSchema<>(TestPlayer.class, conn);
        schema.createTable(conn);
        var stmts = conn.statement.executedSql;
        assertEquals(2, stmts.size());
        assertEquals("CREATE TABLE `test_players` (`id` TEXT, `name` TEXT, `level` INTEGER, PRIMARY KEY (`id`));", stmts.get(0));
        assertEquals("INSERT OR REPLACE INTO `schema_versions` (`table_name`, `version`) VALUES ('test_players', 1)", stmts.get(1));
    }
}
